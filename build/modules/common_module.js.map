{"version":3,"sources":["../index.js"],"names":[],"mappings":"AAAA,OAAO,UAAP;;AAEA,OAAO,MAAM,aAAN,CAAoB;AACvB,eAAY,MAAZ,EAAoB;AAChB,iBAAS,aAAT,CAAuB,MAAvB;AACH;AACD,QAAI,cAAJ,GAAsB;AAClB,eAAO,IAAI,SAAS,IAAT,CAAc,kBAAlB,EAAP;AACH;AACD,QAAI,gBAAJ,GAAwB;AACpB,eAAO,IAAI,SAAS,IAAT,CAAc,oBAAlB,EAAP;AACH;AACD,QAAI,cAAJ,GAAsB;AAClB,eAAO,IAAI,SAAS,IAAT,CAAc,kBAAlB,EAAP;AACH;AACD,QAAI,eAAJ,GAAuB;AACnB,eAAO,IAAI,SAAS,IAAT,CAAc,mBAAlB,EAAP;AACH;AACD,WAAQ,QAAR,EAAkB;AACd,iBAAS,IAAT,GAAgB,eAAhB,CAAgC,KAAM,IAAE,QAAS,WAAjB,CAAhC,EACK,IADL,CACW,MAAD,IAAY;AACd,gBAAI,QAAQ,OAAO,UAAP,CAAkB,WAA9B;AACA,gBAAI,SAAS,OAAO,UAAP,CAAkB,MAA/B;AACA,gBAAI,OAAO,OAAO,IAAlB;AACA,gBAAI,SAAS,SAAS,MAAT,CAAgB,CAAhB,EAAmB,WAAnB,KAAmC,SAAS,KAAT,CAAe,CAAf,CAAnC,GAAuD,cAApE;AACA,gBAAI,aAAa,SAAS,IAAT,CAAc,MAAd,EAAsB,UAAtB,CAAiC,KAAjC,EAAwC,MAAxC,CAAjB;AACA,qBAAS,IAAT,GAAgB,oBAAhB,CAAqC,UAArC,EACK,IADL,CACW,IAAD,IAAU;AACZ,qBAAK,QAAL;AACH,aAHL,EAIK,KAJL,CAIY,KAAD,IAAW;AACd,sBAAM;AACF,yBAAK,MAAM,OADT;AAEF,0BAAM,MAAM;AAFV,iBAAN;AAIH,aATL;AAUH,SAjBL,EAkBK,KAlBL,CAkBY,KAAD,IAAW;AACd,kBAAM;AACF,qBAAK,MAAM,OADT;AAEF,sBAAM,MAAM;AAFV,aAAN;AAIH,SAvBL;AAwBH;AACD,eAAY;AACR,cAAM;AACF,iBAAK,kBADH;AAEF,kBAAM;AAFJ,SAAN;AAIH;AA/CsB","file":"common_module.js","sourcesContent":["import \"firebase\";\n\nexport class FirebaseLogin {\n    initialize (config) {\n        firebase.initializeApp(config);\n    }\n    get googleProvider () {\n        return new firebase.auth.GoogleAuthProvider();\n    }\n    get facebookProvider () {\n        return new firebase.auth.FacebookAuthProvider();\n    }\n    get githubProvider () {\n        return new firebase.auth.GithubAuthProvider();\n    }\n    get twitterProvider () {\n        return new firebase.auth.TwitterAuthProvider();\n    }\n    signIn (provider) {\n        firebase.auth().signInWithPopup(this[`${provider}Provider`])\n            .then((result) => {\n                let token = result.credential.accessToken;\n                let secret = result.credential.secret;\n                let user = result.user;\n                let method = provider.charAt(0).toUpperCase() + provider.slice(1) + 'AuthProvider';\n                let credential = firebase.auth[method].credential(token, secret);\n                firebase.auth().signInWithCredential(credential)\n                    .then((user) => {\n                        this.continue();\n                    })\n                    .catch((error) => {\n                        throw {\n                            msg: error.message,\n                            code: error.code\n                        }\n                    });\n            })\n            .catch((error) => {\n                throw {\n                    msg: error.message,\n                    code: error.code\n                }\n            });\n    }\n    continue () {\n        throw {\n            msg: \"Not implemented!\",\n            code: \"error - on mixing this class you must override this callback\"\n        }\n    }\n}"]}